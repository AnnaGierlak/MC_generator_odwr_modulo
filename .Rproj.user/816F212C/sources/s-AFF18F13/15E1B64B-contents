

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
#funkcja pomocnicza
modular_inverse <- function(k, m) {

  if (k == 0) {
    return(0)
  }

  u <- 1
  w <- k
  x <- 0
  z <- m

  while(w) {

    if (w < z) {
      q <- u
      u <- x
      x <- q
      q <- w
      w <- z
      z <- q
    }

    q <- w %/% z
    u <- u - q * x
    w <- w - q * z

  }

  if (z == 1) {
    if (x < 0) {
      x <- x + m
    }
    return(x)
  } else {
    return(-1)
  }

}


mod_inv_generator <- function(x0, a, b, m, n) {

  if (x0<0 | floor(x0)!=x0) {
    stop('Zla wartosc poczatkowa!')
  }
  if (floor(a)!=a) {
    stop('Zly parametr a!')
  }
  if (floor(b)!=b) {
    stop('Zly parametr b!')
  }
  if (m<2 | floor(m)!=m) {
    stop('Zly parametr m!')
  }
  if (n<1 | floor(n)!=n) {
    stop('Zly parametr n!')
  }


  results <- rep(0, n)

  ind <- 1
  x <- x0

  while(ind <= n) {

    x_mod_inv <- modular_inverse(x, m)
    if (x_mod_inv == -1) {
      print('Brak odwrotnosci modulo - upewnij sie, ze m jest liczba pierwsza!')
      return(-1)
    }
    x <- (a * x_mod_inv + b) %% m
    results[ind] <- x
    ind <- ind + 1
  }

  return(results)

}

formatSeries <- function(vec){
  vec[vec == vec[1]] <- paste("<font color = 'blue' size = '5'>" , vec[vec == vec[1]], "</font>")
  vec
}





```


```{r eruptions, echo=FALSE}
library(shiny)
library(shinythemes)


shinyApp(
ui <- fluidPage(
  theme = shinytheme("cerulean"),
  titlePanel("Generator odwrotnosci modulo"),
  
  wellPanel(
    
    fluidRow(
      column(2,
             numericInput('a', "Wybierz parametr a", value = 1)),
      column(2, 
             numericInput('b', "Wybierz parametr b", value = 1)),
      column(2, 
             numericInput('m', "Wybierz parametr m", value = 13)),
      column(2, 
             numericInput('n', "Podaj dlugosc ciagu", value = 20)),
      column(2, 
             numericInput('x0', "Podaj wartosc x_0", value = 0))
    ),
    fluidRow(
      column(2,
             actionButton('generate', 'Generuj!', class = "btn-info")),
      column(2, offset = 6,
             actionButton('clear', 'Wyczysc'))
    )
  ),
  mainPanel( 
    uiOutput('ciag'), 
    tags$br(), tags$br(),
    downloadButton('save', 'Zapisz ciag', value = T))
),

# Define server logic required to draw a histogram
server <- function(input, output, session) {
  
  ciag <- eventReactive(input$generate, {
    if(numbers::isPrime(input$m)) {
      odp <- mod_inv_generator(input$x0, input$a, input$b, input$m, input$n)
      odp <- formatSeries(odp)
    }
    else odp <- "<font color='#ba464e' size = '8'>m nie jest liczbą pierwszą!</font>"
    HTML(odp)
  })
  
  output$ciag <- renderUI({
    ciag()
  })
  
  output$save <-downloadHandler(
    filename = function() {
      paste0('results_',input$x0,'_',input$a,'_',input$b,'_',input$m,'_',input$n,'.csv')
    },
    content = function(file) {
      write.csv(ciag(), file, row.names = FALSE)
    }
  )
  
  observeEvent(input$clear, {
    updateNumericInput(session, 'a', value = 1)
    updateNumericInput(session, 'b', value = 1)
    updateNumericInput(session, 'm', value = 13)
    updateNumericInput(session, 'n', value = 20)
    updateNumericInput(session, 'x0', value = 0)
  })
  
}

)


```

